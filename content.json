{"pages":[{"title":"Selenium Beginner Course","text":"Setup Firebug Fire Path XPath Checker","link":"/Selenium-Beginner-Course/index.html"}],"posts":[{"title":"Alerts Handling using Selenium WebDriver","text":"Alerts Handling using Selenium WebDriverFor handling alerts on web page, Selenium provides four methods: 1. accept() To accept the alert on web page 2. dismiss() To dismiss the alert on web page 3. getText() To get the text of the alert on web page 4. sendKeys() To send some text to the alert on web page Find below image and selenium code for the same package scripts; import org.openqa.selenium.Alert; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.chrome.ChromeDriver; import org.openqa.selenium.firefox.FirefoxDriver; public class alertHandling { public static void main(String[] args) throws InterruptedException { //set Chromedriver path for Chrome browser System.setProperty(&quot;webdriver.chrome.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\chromedriver.exe&quot;); //create WebDriver object for Chrome WebDriver driver=new ChromeDriver(); //open URL driver.get(&quot;[http://www.seleniumpoint.com/testwebsite.php](http://www.seleniumpoint.com/testwebsite.php)&quot;); //maximize the window driver.manage().window().maximize(); //login to test web site driver.findElement(By.id(&quot;remail&quot;)).sendKeys(&quot;test@seleniumpoint.com &quot;); driver.findElement(By.id(&quot;rpassword&quot;)).sendKeys(&quot;test@123&quot;); driver.findElement(By.id(&quot;rsubmit&quot;)).click(); Thread.sleep(3000); //click on View link of third product to open window: Car Seat driver.findElement(By.xpath(&quot;//div[@class=&apos;product4View&apos;]/a&quot;)).click(); Thread.sleep(3000); //get alert text String alertText=driver.switchTo().alert().getText(); System.out.println(&quot;Alert Text is :&quot; + alertText); //Send value to alert driver.switchTo().alert().sendKeys(&quot;01harshal.shewale@gmail.com&quot;); //accept alert driver.switchTo().alert().accept(); //dismiss alert //driver.switchTo().alert().dismiss(); } }","link":"/Alerts-Handling-using-Selenium-WebDriver/"},{"title":"First Selenium Script","text":"First Selenium ScriptAll setup and basic prerequisites are done. Now lets us start with first basic selenium script. Guys, I have developed a test website for running your selenium scripts. Below is the test website link you can use for your selenium scripts to run:http://www.seleniumpoint/testwebsite.php Let us start with the first script; Register a new user on selenium point test website. Selenium Code package scripts; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.firefox.FirefoxDriver; import org.openqa.selenium.support.ui.Select; public class registration { public static void main(String[] args) { //Set FireFox geckoDriver path System.setProperty(&quot;webdriver.gecko.driver&quot;, &quot;C:\\\\harshal personal\\\\selenium\\\\geckodriver-v0.10.0-win64\\\\geckodriver.exe&quot;); //Initiate FireFox Browser WebDriver d=new FirefoxDriver(); //Open WebSite d.get(&quot;[http://www.seleniumpoint.com/testwebsite.php](http://www.seleniumpoint.com/testwebsite.php)&quot;); //Fill Registration Form d.findElement(By.id(&quot;name&quot;)).sendKeys(&quot;harshal shewale&quot;); d.findElement(By.id(&quot;mobile&quot;)).sendKeys(&quot;7507083311&quot;); d.findElement(By.id(&quot;email&quot;)).sendKeys(&quot;harshal@seleniumpoint.com&quot;); d.findElement(By.id(&quot;password&quot;)).sendKeys(&quot;harshal&quot;); //Select state from Drop down menu Select select=new Select(d.findElement(By.name(&quot;ustate&quot;))); select.selectByVisibleText(&quot;Karnataka&quot;); d.findElement(By.name(&quot;termsCheck&quot;)).click(); //Click On Submit button d.findElement(By.id(&quot;nsubmit&quot;)).click(); } }","link":"/First-Selenium-Script/"},{"title":"Frame Handling Using Selenium WebDriver","text":"Selenium : Frame HandlingSame like window, for automating the content in frame we have to use switchTo().frame(“frameName”);(with given example below, frame is situated in new window, so we must have to switch to window first and then switch to frame to perform operations.)Run the below Code: package scripts; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.chrome.ChromeDriver; /* * Purpose of script is click on AddToCart button in new frame * Here frame is situated in new window , so first we have to switch to window and switch to frame */ public class seleniumFrameHandling { public static void main(String[] args) throws InterruptedException { //set chromedriver path for Chrome browser System.setProperty(&quot;webdriver.chrome.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\chromedriver.exe&quot;); //create WebDriver object for Chrome WebDriver driver=new ChromeDriver(); //open URL driver.get(&quot;[http://www.seleniumpoint.com/testwebsite.php](http://www.seleniumpoint.com/testwebsite.php)&quot;); //maximize the window driver.manage().window().maximize(); //login to test web site driver.findElement(By.id(&quot;remail&quot;)).sendKeys(&quot;test@seleniumpoint.com &quot;); driver.findElement(By.id(&quot;rpassword&quot;)).sendKeys(&quot;test@123&quot;); driver.findElement(By.id(&quot;rsubmit&quot;)).click(); Thread.sleep(4000); //First Get parent window,means current window handle String parentWindow=driver.getWindowHandle(); System.out.println(&quot;Parent Window Title &quot;+driver.getTitle()); //click on View link of third product to open window: Car Seat driver.findElement(By.xpath(&quot;//div[@class=&apos;product3View&apos;]/a&quot;)).click(); //Now here is the New Tab handling code //Get All Tabs or Window handles and iterate using for each loop for(String handle:driver.getWindowHandles()) { System.out.println(handle); driver.switchTo().window(handle); } //switch to frame using frame name driver.switchTo().frame(&quot;carseatframe&quot;); //Click on Cart Button driver.findElement(By.xpath(&quot;//button&quot;)).click(); //Go back to Parent window driver.switchTo().window(parentWindow); } }","link":"/Frame-Handling-Using-Selenium-WebDriver/"},{"title":"Get Tooltip Text Using Selenium WebDriver","text":"Get Tooltip Text Tooltip : many times we see, when we hovers mouse on button or link or text or any web page field,an information displays; is nothing but tooltip! With respect to text validation test cases ,it is must to verify whether tooltip text is displayed correctly or not.So,Let us see how to get tooltip text using selenium webdriver.check below image and selenium code for the same. 12345678910111213141516171819202122232425262728293031323334353637package scripts;import org.openqa.selenium.By;import org.openqa.selenium.WebDriver;import org.openqa.selenium.firefox.FirefoxDriver;public class tooltip { public static void main(String[] args) throws InterruptedException { //set GeckoDriver path for FireFox browser System.setProperty(\"webdriver.gecko.driver\", \"C:\\\\harshal personal\\\\selenium\\\\geckodriver-v0.10.0-win64\\\\geckodriver.exe\"); //Create Browser object WebDriver driver = new FirefoxDriver(); //open URL driver.get(\"[http://www.seleniumpoint.com/testwebsite.php](http://www.seleniumpoint.com/testwebsite.php)\"); //maximize the window driver.manage().window().maximize(); //login to test web site driver.findElement(By.id(\"remail\")).sendKeys(\"test@seleniumpoint.com \"); driver.findElement(By.id(\"rpassword\")).sendKeys(\"test@123\"); driver.findElement(By.id(\"rsubmit\")).click(); Thread.sleep(3000); //Get Tool tip text : mouse hover on product 1 name : Nikon d 50 you will see tooltip String toolTipText = driver.findElement(By.xpath(\"//div[@class='product1Name']//a\")).getAttribute(\"title\").toString(); System.out.println(\"Tool Tip Text is :\" + toolTipText); }}","link":"/Get-Tooltip-Text-Using-Selenium-WebDriver/"},{"title":"Introduction: IDE, RC, WebDriver","text":"What is Selenium. ?Selenium is a brilliant open source automation tool made available by ThoughtWorks Technologies. Simply it automates the browser. We use Selenium to automate any kind of web application, Selenium supports various browsers as well as various programming languages.Indeed, it has limitations too, it cannot automate Windows component. Selenium provides four packages; we can use anyone according to our requirement Selenium IDE Selenium RC Selenium WebDriver Selenium Grid SELENIUM IDEIt is Integrated Development Environment. Basically is a play and record tool works only with Firefox browser. we can record the scripts using IDE and convert it to programing languages like Java, C#, HTML etc. Like every tool, it has limitation too. Advantages:Very easy to install and use, its plugin to Firefox.No programing experience is required.We can debug and set breakpoints as well.Recorded script can convert to programing language and utilize it in RC and WebDriver. Disadvantages:Works only with Firefox browser.No logical statements and conditions like for and while loop.No database testing. It cannot be used in the testing for iPhone and Android applications.Reading from external file like excel, xml, etc. not supported.Alerts, pop up not supported. SELENIUM RCTo overcome selenium IDE limitations, Selenium RC was initially developed. Basically it is developed to act as a proxy between application under test and selenium scripts. With RC we can write selenium script in any programing languages like java, c#, Perl, python etc. and run over all browsers. Selenium RC components are:Selenium ServerSelenium Server receives Selenium commands from your test program, interprets them, and reports back to your program the results of running those tests. Client LibrariesThe client libraries provide the programming support that allows you to run Selenium commands from a program of your own design. There is a different client library for each supported language. A Selenium client library provides a programming interface (API), i.e., a set of functions, which run Selenium commands from your own program. Within each interface, there is a programming function that supports each Selenese command. Supported API : JAVA, .Net, PHP, Python, Perl, Ruby. rc.png But like selenium IDE, Selenium RC also has its limitations, every time we have to start &amp; stop the RC server to execute scripts. As server acts as a middleware between scripts and browser, it directly impacts on execution speed to get down slow. Similarly, there are many other limitations, to overcome those limitations Selenium WebDriver came in a picture. So lets understand the advantages of WebDriver over RC, 1.With Selenium WebDriver, no need to start any server to run tests. 2.WebDriver is faster than Selenium RC since it speaks directly to the browser uses the browser&apos;s own engine to control it. 3.Selenium RC is slower since it uses a JavaScript program called Selenium Core. 4.WebDriver can support the headless HtmlUnit browser. 5.Selenium RC cannot support the headless HtmlUnit browser. It needs a real, visible browser to operate on. 6.Web driver maintains the page load synchronization by default. SELENIUM WEBDRIVERSelenium WebDriver is advanced version of RC, its successor of RC actually. WebDriver does same job like RC but in a different way: instead of injecting a JavaScript code into the browser to simulate user actions, it uses the browsers native support for automation (different for each browser). We have already seen WebDriver advantages over RC above. So here onwards I will cover Web Automation using Selenium WebDriver. WebDriver is known as SELENIUM 2.0Stable build of Selenium 2 (WebDriver) was released in July 2011. Now SELENIUM 2.0 also enhanced to SELENIUM 3.0 this year 2016. While migrating from Selenium 2.0 to Selenium 3.0, we have to take care bellow things: You will need to be running Java 8 to use the Java pieces of Selenium.This is the oldest version of Java officially supported by Oracle, so hopefully you are using it already! Support for Firefox is via Mozillas geckodriver. Support for Safari is provided on macOS (Sierra or later) via Apples own safaridriver. Support for Edge is provided by MS through their webdriver server. Only versions 9 or above of IE are supported. Earlier versions may work, but are no longer supported as MS no longer supports them.","link":"/Introduction-IDE-RC-WebDriver/"},{"title":"How to set up Selenium WebDriver Environment","text":"Step 1: Install JDKDownload and Install Java from bellow: (for selenium 3.0, make sure you are downloading JDK 8 and above) http://www.oracle.com/technetwork/java/javase/downloads/index.html Step 2: Downlaod EclipseDownload eclipse from below url: https://eclipse.org/downloads/ Step 3: Download Selenium 3.0 JarsDownload Selenium WebDriver jars from below url: http://www.seleniumhq.org/download/ Once you download jars, extract and keep at any location, you will have to export it in Eclipse with your selenium project. Step 4: Download Mozilla Gecko DriverTo run scripts on Firefox browser, we need Mozilla Gecko driver for Selenium 3.0, (For Selenium 2.0 it is not required) Download Mozilla GeckoDriver from below url: http://www.seleniumhq.org/download/ Step 5: Create first selenium project in Eclipse.All prerequisites are done! Now lets start with first selenium script. (Open www.google.com in Firefox browser) Create project in Eclipse File –&gt; New –&gt;Java Project (Give any project name like SeleniumTutorails) Create java class: Right click on project name folder–&gt;New–&gt;class (Give any class name like openURL) Now project is created, before to start script, we need to import selenium 3.0 jars in our project. Import Selenium 3.0 jars in Eclipse Java Project (Refer image bellow) Right click on project(SeleniumTutorials)–&gt;Properties –&gt;Java Build path–&gt;Libraries–&gt;Add External Jars Now add selenium 3.0 jars which you have downloaded and then click OK.That is it! Selenium 3.0 is configured. Now lets start with first script to open URL. Open URL in Firefox (http://www.google.com) Open Java class which you have created, (in my case opneURL) Copy paste bellow code: (Just change gecko driver path specific to your location ) ‘’’ package scripts; import org.openqa.selenium.WebDriver; import org.openqa.selenium.firefox.FirefoxDriver; public class openURL { public static void main(String[] args) { //set Gecko driver for FireFox browser System.setProperty(&quot;webdriver.gecko.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\geckodriver-v0.10.0-win64\\\\geckodriver.exe&quot;); //create WebDriver object for FireFox WebDriver driver=new FirefoxDriver(); //open URL driver.get(&quot;http://www.seleniumpoint.com&quot;); } } ‘’’ ~java","link":"/How-to-set-up-Selenium-WebDriver-Environment/"},{"title":"Locators in Selenium WebDriver","text":"Locators in Selenium WebDriverTo perform any action on any web element on UI or webpage, you need its unique locator. For example, if you want to click on button present on UI, you must have to find ID, Name, Xpath, CSS etc. of that particular button. Here are the available locators frequently used: ID Name Link Text XPath CSS DOM (It is not mandatory to present all above locators for each web element, so use whatever is present. But make sure ID should be the highest priority if it is present. 1.IDID is the best way to locate web element if ID is present, as ID supposed to be unique for each element, it works fast to locate element than XPath.Look at bellow Image and HTML code and corresponding selenium code to locate element (Name text box) by using ID. Selenium Code: d.findElement(By.id(“FirstName”)).sendKeys(“harshal”); 2.NameIf there is no ID present for any element, the next attribute to look up should be name. but make sure it should be unique. Selenium Code: d.findElement(By.name(“LastName”)).sendKeys(“harshal”); 3.Link TextThis kind of locators applies only on hyperlinks. Hyperlinks has anchor tag in HTML.This is anchor tag : a Selenium Code: d.findElement(By.linkText(“Learn more”)).click(); 4.XPathXPath means XML Path. When any web page element does not have any unique locator then we have to use XPath.XPath can access almost any web element. There are two types of XPath: 1) Absolute XPath 2) Relative XPath Absolute XPath: It is the direct way to find the element, hence it is fast way to find element. but the disadvantage is that if there are any changes made in the path of the element then that XPath gets failed.It begins with the single forward slash(/) ,which means you can select the element from the root node.Syntax:html/head/body/table/tr/tdLook at bellow image, I have shown you absolute XPath using Fire path. Relative XPath: In Relative XPath, path starts from the middle of the HTML DOM structure. ( from the node of your choice) It starts with double slash (//).Syntax://table/tbody/tr/thLook at bellow image, I have shown you relative XPath using Fire path. How to Identify XPath: There are many ways and tools available to identify Xpath. Let see few ways to get XPath:Identify XPath using Fire path:In 4th tutorial above, I have mentioned how to install Fire PathOnce you install Fire bug and its add-on Fire Path, inspect any web element using Fire Bug, it will give you XPath. See below image for the same. Also you can manually identify XPath, watch video for the same. 5.CSSCompared to XPath locators, CSS locators are faster. It is observed that, In Internet Explorer browser XPath works too slow, while CSS works pretty much faster.Syntax:tagName[attributename=attributeValue]input[id=FirstName] In CSS, for ID property, we can use hash (#), so above CSS will becomeinput#FirstNameAlso for Class, CSS use dot (.)For example:Input[class=fname]Input.fname","link":"/Locators-in-Selenium-WebDriver/"},{"title":"New Tab Window handling using Selenium WebDriver","text":"Selenium : New Tab Window handlingTab is same like window. There is no difference with respect to selenium. There is difference at code level, I mean HTML code level. But for selenium automation both are the same.So, automating the new tab content is same like window.You have to use switchTo().window()Run below code for the same. package scripts; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.chrome.ChromeDriver; /* * Purpose of script is click on AddToCart button in new tab * */ public class newTabHandling { public static void main(String[] args) throws InterruptedException { //set chromedriver path for Chrome browser System.setProperty(&quot;webdriver.chrome.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\chromedriver.exe&quot;); //create WebDriver object for Chrome WebDriver driver=new ChromeDriver(); //open URL driver.get(&quot;[http://www.seleniumpoint.com/testwebsite.php](http://www.seleniumpoint.com/testwebsite.php)&quot;); //maximize the window driver.manage().window().maximize(); //login to test web site driver.findElement(By.id(&quot;remail&quot;)).sendKeys(&quot;test@seleniumpoint.com &quot;); driver.findElement(By.id(&quot;rpassword&quot;)).sendKeys(&quot;test@123&quot;); driver.findElement(By.id(&quot;rsubmit&quot;)).click(); Thread.sleep(4000); //First Get parent window,means current window handle String parentWindow=driver.getWindowHandle(); System.out.println(&quot;Parent Window Title &quot;+driver.getTitle()); //click on View link of second product to open window: Bag driver.findElement(By.xpath(&quot;//div[@class=&apos;product2View&apos;]/a&quot;)).click(); //Now here is the New Tab handling code //Get All Tabs or Window handles and iterate using for each loop for(String handle:driver.getWindowHandles()) { System.out.println(handle); driver.switchTo().window(handle); } //Click on Cart Button driver.findElement(By.xpath(&quot;//button&quot;)).click(); //Go back to Parent window driver.switchTo().window(parentWindow); } }","link":"/New-Tab-Window-handling-using-Selenium-WebDriver/"},{"title":"Print Table Data Using Selenium WebDriver","text":"Selenium : Print Table DataWe can find every web element using its tag name. table has tr tag for row.In Selenium WebDriver we can use driver.findElements(By.tagName(“tr”) to find all rows data.Check below image and Selenium code for the same: package scripts; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.WebElement; import org.openqa.selenium.firefox.FirefoxDriver; public class printTableData { public static void main(String[] args) throws InterruptedException { //set GeckoDriver path for FireFox browser System.setProperty(&quot;webdriver.gecko.driver&quot;, &quot;C:\\\\harshal personal\\\\selenium\\\\geckodriver-v0.10.0-win64\\\\geckodriver.exe&quot;); //Create Browser object WebDriver driver=new FirefoxDriver(); //open URL driver.get(&quot;[http://www.seleniumpoint.com/testwebsite.php](http://www.seleniumpoint.com/testwebsite.php)&quot;); //maximize the window driver.manage().window().maximize(); //login to test web site driver.findElement(By.id(&quot;remail&quot;)).sendKeys(&quot;test@seleniumpoint.com &quot;); driver.findElement(By.id(&quot;rpassword&quot;)).sendKeys(&quot;test@123&quot;); driver.findElement(By.id(&quot;rsubmit&quot;)).click(); Thread.sleep(3000); //Get Row Count int rowCount=driver.findElements(By.tagName(&quot;tr&quot;)).size(); //Get Column Count int colCount=driver.findElements(By.xpath(&quot;//thead//th&quot;)).size(); System.out.println(&quot;Row count :&quot; + rowCount); System.out.println(&quot;Col count :&quot; + colCount); //Print table Data for(WebElement tdata:driver.findElements(By.tagName(&quot;tr&quot;))) { System.out.println(tdata.getText()); } } }","link":"/Print-Table-Data-Using-Selenium-WebDriver/"},{"title":" Select Dropdown values using Selenium WebDriver","text":"Select Dropdown valuesSelenium WebDriver provides n number of inbuilt methods to perform actions on appliaction under test. For selecting dropdown values, selenium provides below three methods: 1. selectByIndex 2. selectByValue 3. selectByVisibleText selectByIndex means select dropdown value using its index. Index starts from zero.for selectByValue and selectByVisibleText , inspect using firebug to see its value and visible text.(Value and visible text can be same or different)Refer below image and selenium code for the same package scripts; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.WebElement; import org.openqa.selenium.chrome.ChromeDriver; import org.openqa.selenium.support.ui.Select; public class selectDropdownValues { public static void main(String[] args) throws InterruptedException { // TODO Auto-generated method stub //set chromedriver path for Chrome browser System.setProperty(&quot;webdriver.chrome.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\chromedriver.exe&quot;); //create WebDriver object for Chrome WebDriver driver=new ChromeDriver(); //open URL driver.get(&quot;[http://www.seleniumpoint.com/testwebsite.php](http://www.seleniumpoint.com/testwebsite.php)&quot;); //maximize the window driver.manage().window().maximize(); //get the Locator of drop down box WebElement dropdown=driver.findElement(By.name(&quot;ustate&quot;)); //Create object of Select Class Select select=new Select(dropdown); //We can select Drop down value by three ways: //Method 1: Select drop down value using index select.selectByIndex(4); Thread.sleep(2000); // Method 2: Select drop down value using index select.selectByValue(&quot;Chhattisgarh&quot;); Thread.sleep(2000); //Method 3: Select drop down value using index select.selectByVisibleText(&quot;Maharashtra&quot;); } }","link":"/Select-Dropdown-values/"},{"title":"Selenium Scripts with All browsers","text":"Run Selenium WebDriver scripts on all browsersRun Selenium WebDriver scripts on all browsersMulti browser testing is always important. Accordingly, we should know how to run selenium scripts on all supported browsers,solet know how selenium works with different browsers.Selenium requires external browser drivers specific to browser to run the scripts.For example, For Firefox:GeckoDriver is required. For Chrome: ChromeDriver is required. For IE: InternetExplorerDriver is required. For Microsoft Edge Browser: MicrosoftEdgeDriver is required. For Safari: SafariDriver is required. Download All drivers from bellow link:http://www.seleniumhq.org/download/ Once you download the drivers keep it at any location, you will have to add its path in selenium program. 1.Firefox Browser:System.setProperty (“webdriver.gecko.driver”,”\\path\\to\\geckodriver.exe”); Example: System.setProperty(&quot;webdriver.gecko.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\geckodriver-v0.10.0-win64\\\\geckodriver.exe&quot;); //create WebDriver object for FireFox WebDriver driver=new FirefoxDriver(); //open URL driver.get(&quot;http://www.google.com&quot;); 2.Chrome Browser:System.setProperty (“webdriver.chrome.driver”,”\\path\\to\\chromedriver.exe”); Example: System.setProperty(&quot;webdriver.chrome.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\chromedriver.exe&quot;); //create WebDriver object for Chrome WebDriver driver=new ChromeDriver(); //open URL driver.get(&quot;http://www.google.com&quot;); 3.Internet Explorer Browser: (For Selenium 3.0 , IE version 9 or above supported )System.setProperty (“webdriver.ie.driver”,”\\path\\to\\InternetExplorerDriver.exe”); Example: System.setProperty(&quot;webdriver.ie.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\InternetExplorerDriverr.exe&quot;); //create WebDriver object for IE WebDriver driver=new InternetExplorerDriver(); //open URL driver.get(&quot;http://www.google.com&quot;); 4.Microsoft Edge Browser:System.setProperty (“webdriver.edge.driver”,”\\path\\to\\MicrosoftWebDriver.exe”); Example: System.setProperty(&quot;webdriver.edge.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\MicrosoftWebDriver.exe&quot;); //create WebDriver object for Edge browser WebDriver driver=new MicrosoftWebDriver(); //open URL driver.get(&quot;http://www.google.com&quot;); 5.Safari Browser:System.setProperty (“webdriver.safari.driver”,”\\path\\to\\safaridriver.exe”); Example: System.setProperty(&quot;webdriver.safari.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\safaridriver.exe&quot;); //create WebDriver object for safari WebDriver driver=new SafariDriver(); //open URL driver.get(&quot;http://www.google.com]&quot;);","link":"/Selenium-Scripts-with-All-browsers/"},{"title":"Selenium WebDriver Wait","text":"Selenium WebDriver WaitMost of the web application are using AJAX techniques. When a page is loaded to browser, the elements within that page may load at different time intervals. This makes locating elements difficult, if the element is not present in the DOM, it will raise exceptions like ElementNotVisibleException, ElementNotPresentExceptionetc.Using waits, we can solve this issue.So, let us discuss about different selenium waits available in Selenium WebDriver: 1.Implicit WaitIt is used to set default wait time between two steps. For example, if you want to put wait for 30 seconds, use implicit wait like below: //create WebDriver object for FireFox WebDriver driver=new FirefoxDriver(); //Set Implicit wait for 30 second driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); //open URL driver.get(&quot;[http://www.seleniumpoint.com](http://www.seleniumpoint.com/)&quot;); //Perform further actions.... driver.findElement(By.id(&quot;name&quot;)).sendKeys(&quot;any value&quot;); In the above example the implicit waits value is given as 30sec i.e, if web driver able to find the element with in the given span 30sec it immediately returns true and go to next step else it raises an exception after 30 seconds. IMP: Implicit waits will be in place for the entire time the browser is open. This means that any search for elements on the page could take the time the implicit wait is set for. 2.Explicit WaitExplicit waits are used to pause the execution till the time a particular condition is occur or the maximum time has elapsed.Explicit waits are applied for a particular instance only.WebDriver introduces classes like WebDriverWait and ExpectedConditions to enforce Explicit waits into the test scripts.For example:If you are writing a script for login to Gmail account, you will enter username , password and click on Sign In button. Then wait till the Compose button appearing on next page. This is nothing but explicit wait. Selenium Script: package scripts; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.firefox.FirefoxDriver; import org.openqa.selenium.support.ui.ExpectedConditions; import org.openqa.selenium.support.ui.WebDriverWait; public class ExplicitWait { public static void main(String[] args) throws InterruptedException { //set Gecko driver for FireFox browser System.setProperty(&quot;webdriver.gecko.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\geckodriver-v0.10.0-win64\\\\geckodriver.exe&quot;); //create WebDriver object for FireFox WebDriver driver=new FirefoxDriver(); //open URL driver.get(&quot;[https://www.gmail.com/](https://www.gmail.com/)&quot;); //enter username driver.findElement(By.id(&quot;Email&quot;)).sendKeys(&quot;01harshal.shewale@gmail.com&quot;); //click next driver.findElement(By.id(&quot;next&quot;)).click(); //Explicit wait till SignIn Button visible WebDriverWait wait=new WebDriverWait(driver,30); wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.id(&quot;signIn&quot;)))); //enter password driver.findElement(By.id(&quot;Passwd&quot;)).sendKeys(&quot;Chlorodots@2014&quot;); //click on Sign In button driver.findElement(By.id(&quot;signIn&quot;)).click(); //Explicit wait till Compose Button to be clickable wait.until(ExpectedConditions.elementToBeClickable(By.xpath(&quot;//div[@class=&apos;z0&apos;]&quot;))); driver.findElement(By.xpath(&quot;//div[@class=&apos;z0&apos;]&quot;)).click(); } }","link":"/Selenium-WebDriver-Wait/"},{"title":"Setup Firebug, Fire Path, XPath Checker","text":"Setup Firebug, Fire Path, XPath CheckerSelenium script is nothing but identify elements (text,text box, links, buttons, checkbox, windows etc.) on webpage and perform operations in order to automate it.So those elements are identified by locators, (will explain locators in next topic). And above mentioned tools are played important role to identify locators, so install it first. 1.Firebug Installation:Firebug is Add-on to Firefox browser. Open Firefox browser–&gt;Tools–&gt;Add-ons–&gt;Extensions–&gt;search for Firbug–&gt;Install Once you install firebug, you will see firebug icon in Firefox browser at top right corner (see in image bellow) 2.FirePath Installation:Firebug is Add-on to Firebug,Installation process is same like firebug. Open Firefox browser –&gt;Tools–&gt;Add-ons–&gt;Extensions–&gt;search for Firpath–&gt;Install Once you install Firepath, Restart the Firefox browser, open any website any open Firbug.In Firebug panel you can see Firpath , from where you can get readymade Xpath which you can use in script ahead. 3.XPath Checker Installation:XPath Checker is Addon to Firefox. Installation process is same like firebug Open Firefox browser –&gt;Tools–&gt;Add-ons–&gt;Extensions–&gt;search for Xpath Checker–&gt;Install Once you install XPath Checker ,restart Firefox browser. Open any website in Firefox ,right click on any web element, you can see View xpath option, means Xpath checker is installed.Click on it, xpath checker window will appear, where you can identify xpath manually.","link":"/Setup-Firebug-Fire-Path-XPath-Checker/"},{"title":"Print All Web Page Links using Selenium WebDriver","text":"Print All Web Page LinksWe can find every web element using its tag name. Links has anchor tag (a).In Selenium WebDriver we can use driver.findElements(By.tagName(“a”) to find all links on web pageRun the below Code: package scripts; import org.openqa.package scripts; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.WebElement; import org.openqa.selenium.firefox.FirefoxDriver; public class printAllLinks { static int linkCount=0; public static void main(String[] args) { //set GeckoDriver path for FireFox browser System.setProperty(&quot;webdriver.gecko.driver&quot;, &quot;C:\\\\harshal personal\\\\selenium\\\\geckodriver-v0.10.0-win64\\\\geckodriver.exe&quot;); //Create Browser object WebDriver driver=new FirefoxDriver(); //Open URL driver.get(&quot;[http://www.seleniumpoint.com](http://www.seleniumpoint.com/)&quot;); //Get links in for each loop for(WebElement links : driver.findElements(By.tagName(&quot;a&quot;))) { System.out.println(links.getText()); linkCount++; } //Print Link Count System.out.println(&quot;Total Links on Page : &quot;+linkCount); } }","link":"/Print-All-Web-Page-Links-using-Selenium-WebDriver/"},{"title":"Window handling using Selenium WebDriver","text":"Selenium : Window handlingMany times on web application we see contents opens in window. So, for automating the newly opened window using selenium, we must have to switch to that window.Here is a code for the same. You can try this code by yourself. Just copy the code below and run locally using eclipse. package scripts; import org.openqa.selenium.By; import org.openqa.selenium.WebDriver; import org.openqa.selenium.chrome.ChromeDriver; /* * Purpose of script is click on AddToCart button in new Window * */ public class windowHandling { public static void main(String[] args) throws InterruptedException { //set chromedriver path for Chrome browser System.setProperty(&quot;webdriver.chrome.driver&quot;,&quot;C:\\\\harshal personal\\\\selenium\\\\chromedriver.exe&quot;); //create WebDriver object for Chrome WebDriver driver=new ChromeDriver(); //open URL driver.get(&quot;[http://www.seleniumpoint.com/testwebsite.php](http://www.seleniumpoint.com/testwebsite.php)&quot;); //maximize the window driver.manage().window().maximize(); //login to test web site driver.findElement(By.id(&quot;remail&quot;)).sendKeys(&quot;test@seleniumpoint.com &quot;); driver.findElement(By.id(&quot;rpassword&quot;)).sendKeys(&quot;test@123&quot;); driver.findElement(By.id(&quot;rsubmit&quot;)).click(); Thread.sleep(4000); //First Get parent window,means current window handle String parentWindow=driver.getWindowHandle(); System.out.println(&quot;Parent Window Title &quot;+driver.getTitle()); //click on View link of first product to open window: Nikon D50 driver.findElement(By.xpath(&quot;//div[@class=&apos;product1View&apos;]/a&quot;)).click(); //Now here is the Window handling code //Get All windows handles and iterate using for each loop for(String handle:driver.getWindowHandles()) { System.out.println(handle); driver.switchTo().window(handle); } //Click on Cart Button driver.findElement(By.xpath(&quot;//button&quot;)).click(); //Go back to Parent window driver.switchTo().window(parentWindow); } }","link":"/Window-handling-using-Selenium-WebDriver/"}],"tags":[{"name":"Selenium","slug":"Selenium","link":"/tags/Selenium/"}],"categories":[{"name":"Selenium","slug":"Selenium","link":"/categories/Selenium/"}]}